Annan Miao

In the case provided, the run time for breadth-first algorithm is 8.647701501846313s, and the run time for A* Search algorithm is 13.743684768676758s. The time complexity for breadth-first algorithm is O(V+E) or O(B^D) and the complexity for A* search extremely depends on the structure of graph and the heuristic function to use.

A* Search is a powerful heuristic path finding approach and it can be widely used in various areas. I think it can be expanded by setting multiple equivalent goals and then identifying the optimal path, determining whether or not there will be a feasible solution to the path finding problem in specific circumstances, and analyzing the best heuristic function to use for different kinds of environments.


The MazeAgent consists of 

1. a getStartpoint and a getGoalpoint function to find the locations of start and goal points.

2. a getCommand function to transfer the path into commands.

3. a getHeuristics function for the A* Search Algorithm. Since I use a priority queue in A* search, we need that the closer to the goal, the larger the value of h(x). So in this case I use the (height + width - sum of absolute values of vertical and horizontal distances to the goal point) as h(x). 

4. the get_path, __plan_path_breadth and __plan_path_astar functions required.

We can run the program by running the MazeSim code, and change the search approaches by changing the input to the MazeAgent (in this case the inputs should be "bf" or "astar").
